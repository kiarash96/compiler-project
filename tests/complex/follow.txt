Program: eof
DeclarationList: eof int void
Declaration: eof int void
VarDeclaration: eof int void } id ; { if while return output
TypeSpecifier: id
FunDeclaration: eof int void
Params: )
ParamList: ) ,
Param: ) ,
CompoundStmt: eof int void } id ; { if while return output else
LocalDeclarations: } id ; { if while return output int
StatementList: } id ; { if while return output
Statement: } id ; { if while return output else
ExpressionStmt: } id ; { if while return output else
SelectionStmt: } id ; { if while return output else
S': } id ; { if while return output else
IterationStmt: } id ; { if while return output else
ReturnStmt: } id ; { if while return output else
Var: < = ; ] ) == && + - , * /
GenExpression: ) ;
RelExpression: ) ; &&
RelTerm: ) ; &&
Expression: ; ] ) == && + - , <
Term: ; ] ) == && + - , * / <
Factor: ; ] ) == && + - , * / <
PUSHNUM: num
PUSHNEGNUM: num
PID: id
JPFUNC: (
JPMAIN: (
NEWID: id
NEWARR: num
START: {
INTFUNC: (
VOIDFUNC: (
BLOCKS: id ; { if while return output int }
BLOCKE: } id ; { if while return output else
LABEL: (
SAVE: id ; { if while return output
JPF_SAVE: id ; { if while return output
PARR: < = ; ] ) == && + - , * /
CHECKSIGN: + -
Num: < ; ] ) == && + - , * /
Call: < ; ] ) == && + - , * /
Args: )
ArgList: ) ,
